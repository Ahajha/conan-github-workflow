# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        BUILD_TYPE=${{ matrix.build_type }}
        if [ ${{ matrix.os }} == "windows-latest" ]
        then
            echo "conan-configure-preset=conan-default" >> "$GITHUB_OUTPUT"
        else
            echo "conan-configure-preset=conan-${BUILD_TYPE@L}" >> "$GITHUB_OUTPUT"
        fi
        echo "conan-build-preset=conan-${BUILD_TYPE@L}" >> "$GITHUB_OUTPUT"

    - name: Install Conan
      run: pip install conan
    
    - name: Create Conan profile
      run: conan profile detect

    - name: Install Conan dependencies
      run: conan install . -s compiler.cppstd=20
    
    - name: Configure CMake
      run: cmake --preset ${{ steps.strings.outputs.conan-configure-preset }}

    - name: Build
      run: cmake --build --preset ${{ steps.strings.outputs.conan-build-preset }}

    - name: Test
      run: ctest --preset ${{ steps.strings.outputs.conan-build-preset }}
